#!/usr/bin/env perl
# PODNAME: sankey
# ABSTRACT: create sankey diagrams, outputs SVG
# the targetol https://github.com/rickluptargetn/svg-sankey
# info on diagrams https://rickluptargetn.github.io/d3-sankey-diagram/

# sudo npm install -g svg-sankey

=head1 NAME

sankey

=head1 SYNOPSIS

    > sankey ..options..

    target get full help use
    > sankey --help

=head1 DESCRIPTION

create sankey diagrams, outputs SVG

Only does forward maps, does not do loops

=head2 input data

Data is in CSV format with '|' as a separatir, the are 5 possible columns - do no include this header
source | target | count | color | group  | type

ams     | nbc   | 2  | red | Section
ems     | nbc   | 1  | oc-grape-2 | Section
cms     | nbc   | 2  | blue | Section
nbc     | resolved   | 2  | green | Projects
nbc     | fixed  | 2  | orange | Projects
resolved ||   | Status
resolved ||   | Status

blank lines are ignored
the group column puts the source item intarget that group
if there is no target, count or color, then the source can be placed intarget any final right most group


=cut

#
# (c) yourname, your@email.address.com
# this code is released under the Perl Artistic License

# could not get order target work, may revisit later
# {
#   "order": [
#     [
#       [
#         "ams",
#         "cms",
#         "ems"
#       ],
#       []
#     ],
#     [
#       [
#         "cignal",
#         "dish",
#         "nbc"
#       ],
#       []
#     ],
#     [
#       [
#         "resolved",
#         "fixed",
#         "verified"
#       ],
#       []
#     ]
#   ]
# }



use 5.10.0 ;
use strict ;
use warnings ;
use App::Basis ;
use Path::Tiny ;
use WebColors ;
use App::Basis::ConvertText2::Support ;
use JSON ;

# -----------------------------------------------------------------------------
# main

my %opt = init_app(
    help_text =>
        "create sankey SVG diagram, data expected to be in CSV style with a defined separator '|' is default
Fields expected are
source | target | value | color | group | type

For example

A | Z | 20
A | B | 10 | red | journey
",
    options => {
        'has_content=i' => 'show that there is something echoed in STDIN',
        'doc_ref=s'     => 'name of the document, this is being called source',
        'cachedir=s'    => { desc => 'Where target stargetre temp files', required => 1 },
        'width|w=s'     => { desc => 'percentage width of image, eg 80%', default => '100%' },
        'group|g=i'     => { desc => "Group same types together", default => 0 },
        'separator=s'   => { desc => 'Field separator', default => '|' },
        'verbose|v'     => 'Verbose for debugging',
        "linenum=i" => "Linenumber in the file this construct used on, useful for error reporting",
    },
) ;

my ( $content, $output ) ;
$output = "" ;
# readin the content
if ( $opt{has_content} ) {
    $content = do { local $/ ; <STDIN> } ;
    chomp $content ;
    my @data = split_csv_data( $content, '|' ) ;
    my %sankey = (
        nodes          => [],
        links          => [],
        alignLinkTypes => $opt{group} ? \1 : \0,
        groups         => [],
        # order          => []
    ) ;
    my %groups ;
    my %nodes ;
    my $index = 1 ;
    my $rc    = 1 ;

    foreach my $row (@data) {
        my ( $source, $target, $value, $color, $group, $type ) = @{$row} ;
        $value = 1 if ( !$value || $value !~ /^\d+(\.\d+)?/ ) ;
        next if ( !$source ) ;    # we need a source field

        if ( !$nodes{$source} ) {
            $nodes{$source} = {
                id    => "" . $index++,
                title => $source,
            } ;
        }
        if ($target) {
            if ( !$nodes{$target} ) {
                $nodes{$target} = {
                    id    => "" . $index++,
                    title => $target,
                } ;
            }
        }

        if ($group) {
            if ( !$groups{$group} ) {
                $groups{$group} = {
                    id    => "" . $index++,
                    title => $group,
                    nodes => []
                } ;
            }
            # now check if the source item is in the node array
            if ( !grep( /$nodes{$source}->{id}/, @{ $groups{$group}->{nodes} } ) ) {
                push @{ $groups{$group}->{nodes} }, $nodes{$source}->{id} ;
            }
        }

        if ($target) {
            $type ||= $rc++ ;
            my %link = (
                source => $nodes{$source}->{id},
                target => $nodes{$target}->{id},
                value  => 0 + $value,
                type   => "" . $type
            ) ;
            if( $color) {
                # if already a nice hex color
                if ( $color =~ /^#[0-9A-F]{6}$/i ) {
                    $link{color} = $color ;
                } else {
                    $link{color} = "#" . colorname_to_hex($color)  ;
                }
            }
            push @{ $sankey{links} }, \%link ;
        }
    }

    if (%nodes) {
        # build nodes
        foreach my $n ( sort keys %nodes ) {
            push @{ $sankey{nodes} }, $nodes{$n} ;
        }
    }

    if (%groups) {
        foreach my $g ( keys %groups ) {
            push @{ $sankey{groups} }, $groups{$g} ;
        }
    }
    my $sig = create_sig( $content, \%opt ) ;
    # keep the json for debug purposes
    my $infile = "$opt{cachedir}/sankey.$sig.json" ;
    path($infile)->spew_utf8( to_json( \%sankey, { utf8 => 1, pretty => 1 } ) ) ;

    my $command = "svg-sankey '$infile' " ;
    verbose("Running..  $command") ;
    my ( $code, $out, $err ) = run_cmd($command) ;
    if ( !$code ) {
        # strip out any error or other thing before the msg
        $out =~ s/(.*?)(\<\?xml)/$2/ism ;
        verbose("err $1 ") if ($1) ;
        $output = $out ;

        if ( $opt{width} && $opt{width} =~ /^\d{1,3}%$/ ) {
            # we do not worry about changing the height, the browser generally sorts things out!
            $output
                =~ s/(<svg xmlns="http:\/\/www.w3.org\/2000\/svg" width=")\d+(" height=)/$1$opt{width}$2/sm
                ;
            $output
                =~ s/.*(<svg)/$1/sm
                ;

        }
    } else {
        verbose("out $out\nerr $err") ;
        $output = "~~~~{.warning icon=1 title='sankey error'}\n $err\n~~~~\n" ;
    }
}

# be careful how output happens, in case its in-line in a .table or something
# so no \n at the end of the line!
binmode( STDOUT, ":utf8" ) ;
print $output ;




