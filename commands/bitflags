#!/usr/bin/env perl
# PODNAME: bitflags
# ABSTRACT: create a table representing bit flags

=head1 NAME

bitflags

=head1 SYNOPSIS

    > bitflags ..options..

    to get full help use
    > bitflags --help

=head1 DESCRIPTION

create a table representing bit flags

=cut

#
# (c) yourname, your@email.address.com
# this code is released under the Perl Artistic License

use 5.10.0 ;
use strict ;
use warnings ;
use App::Basis ;
use WebColors ;

# -----------------------------------------------------------------------------
# 4 x 8 sets of colors
my @auto_colors = map {"#.$_"} (
    qw/
        oc-red-0 oc-grape-0 oc-orange-0 oc-blue-0 oc-teal-0 oc-cyan-0 oc-indigo-0 oc-lime-0
        oc-red-2 oc-grape-2 oc-orange-2 oc-blue-2 oc-teal-2 oc-cyan-2 oc-indigo-2 oc-lime-2
        oc-red-4 oc-grape-4 oc-orange-4 oc-blue-4 oc-teal-4 oc-cyan-4 oc-indigo-4 oc-lime-4
        oc-red-6 oc-grape-6 oc-orange-6 oc-blue-6 oc-teal-6 oc-cyan-6 oc-indigo-6 oc-lime-6
        /
) ;

my $color_regexp = qr/(([\w\-]+)?\.?([\w\-]+)?)/ ;    # $1 all, $2 fg, $3 bg

# -----------------------------------------------------------------------------

=item to_hex_color

when using colors, mke sure colour triplets etc get a hash in front,
actual triplets (ABC) will get expanded to (AABBCC)

B<Parameters>
    color     - the color to check or convert

B<Returns>
    the color with a hash if needed, eg #AABBCC

=cut

sub to_hex_color
{
    my $c = shift ;

    if ($c) {
        if ( $c =~ /(^[\w-]+[\d]+0$|^oc[\w\-]+[0-9]$)/ ) {
            my $c2 = colorname_to_hex($c) ;
            $c = "#$c2" if ($c2) ;
        } else {
            $c =~ s/^([0-9a-f])([0-9a-f])([0-9a-f])$/#$1$1$2$2$3$3/i ;
            $c =~ s/^([0-9a-f]{6})$/#$1/i ;
        }
    }
    return $c ;
}

# -----------------------------------------------------------------------------
sub _extract_colors
{
    my ($cs) = @_ ;
    my ( $fg, $bg ) ;
    # cell color may contain a period so lets do that first
    # if ( $cs =~ s/#(([\w\-]+)?\.?([\w\-]+)?)$// ) {
    if ( $cs =~ s/#$color_regexp$// ) {
        ( $fg, $bg ) = ( $2, $3 ) ;
    }
    return ( $fg || "", $bg || "" ) ;
}

# -----------------------------------------------------------------------------
# text
# width
# rotate
# color
sub _svg_rotate
{
    my $params = @_ % 2 ? shift : {@_} ;
    if ( ref($params) ne 'HASH' ) {
        warn "recall accepts a hash or a hashref of parameters" ;
        return 0 ;
    }
    my $style = "" ;
    $params->{width}  ||= 20 ;
    $params->{rotate} ||= 90 ;

    $params->{text} =~ s/\*\*([\w ]+)\*\*/<tspan style='font-weight:bold;'>$1<\/tspan>/gsm ;
    $params->{text} =~ s/\*([\w ]+)\*/<tspan style='font-style:italic;'>$1<\/tspan>/gsm ;

    if ( $params->{color} ) {
        my ( $fill, $bg ) = _extract_colors( $params->{color} ) ;
        # incase there are material or open-color colors
        $style = "style='fill: " . to_hex_color($fill) . ";'" ;
    }
    return
        "<svg width='$params->{width}'><g><text x='0' y='0' transform='rotate($params->{rotate})' $style>$params->{text}</text></g></svg>"
        ;
}

# -----------------------------------------------------------------------------
# main

my %opt = init_app(
    help_text => "create a table representing bit flags",
    options   => {
        'has_content=i' => 'show that there is something echoed in STDIN',
        'doc_ref=s'     => 'name of the document, this is being called from',
        'cachedir=s'    => { desc => 'Where to store temp files', required => 1 },
        'align=s'       => { desc => 'Align the bitflag table', default => "center" },
        'title=s'       => "Title for table",
        'caption=s'     => "caption for table",
        'direction=s' =>
            { desc => 'direction of text, tb=top_to_bottom, bt=bottom_to_top', default => 'bt' },
        'describe=s' =>
            { desc => 'add table describing the fields, if provided', default => 'yes' },
        'mono=s'    => { desc => 'Do not autocolor the table', default => 'no' },
        'linenum=i' => 'the line in the document where this element starts',
        'verbose|v' => 'Verbose for debugging',
    },
) ;
# set text print direct, get it wrong and you just get the default
$opt{direction} = ( $opt{direction} =~ /^tb$/i )         ? 90 : -90 ;
$opt{mono}      = ( $opt{mono} =~ /^(yes|on|1|true)$/i ) ? 1  : 0 ;


my ( $content, $output, $flags, %cells ) ;
my $width = 20 ;
# readin the content
if ( $opt{has_content} ) {
    my @t ;
    $content = do { local $/ ; <STDIN> } ;
    chomp $content ;
    foreach my $r ( split( /\n/, $content ) ) {
        push @t, $r if ($r) ;
    }
    my @tmp ;
    my $last ;
    foreach my $line (@t) {
        if ( $line !~ /^\s*(\d+)(-(\d+))?\s*:/ ) {
            # cannot add to line before the start!
            next if ( !defined $last || $line !~ /^\s*:/ ) ;
            $line =~ s/^\s*:\s*// ;    # remove line start and add html new line
                                       # $tmp[$last-1] .= "<br>$line" ;
            if ( $tmp[ $last - 1 ] !~ s/(#$color_regexp)\s*/<br>$line $1/ ) {
                $tmp[ $last - 1 ] .= "<br>$line" ;
            }
        } else {
            push @tmp, $line ;
            $last++ ;
        }
    }
    # verbose_data( \@tmp ) ;
    my $caption = $opt{caption} ? "caption='$opt{caption}'" : "" ;

    # sort on first number on the row
    @t = sort { ( $b =~ /^(\d+)/ )[0] <=> ( $a =~ /^(\d+)/ )[0] } @tmp ;

    # now split up the data
    my $max      = 0 ;
    my $cols     = 0 ;
    my $describe = 0 ;
    foreach my $c (@t) {
        my ( $pos, $skip, $span, $text ) = $c =~ /^\s*(\d+)(-(\d+))?\s*:\s*(.*)/sm ;
        my ( $color, $desc ) = ( "", "" ) ;
        my $style = "{=" ;

        # remove and save any descriptive field
        if ( $text && $text =~ s/\s*:\s*(.*)//sm ) {
            $desc     = $1 ;
            $describe = 1 ;
            if ( $desc =~ s/(#$color_regexp)\s*//sm ) {
                $color = $1 ;
            }
        } elsif ( $text && $text =~ s/(#$color_regexp)\s*//sm ) {
            $color = $1 ;
        }
        $span ||= 0 ;
        if ( $span > $pos ) {
            my $tmp = $pos ;
            $pos  = $span ;
            $span = $tmp ;
        } elsif ( $span == $pos ) {    # catch the jokers
            $span = 0 ;
        }
        $span = $pos - $span + 1 if ($span) ;
        $cols += $span || 1 ;
        if ($span) {
            $style .= " c$span" ;
        }
        $max = $pos if ( $pos > $max ) ;
        my $fg ;
        # apply colors if nothing provided
        if ( !$color && !$opt{mono} ) {
            $color = $auto_colors[$pos] ;
        }
        # verbose("desc: $desc, pos $pos, span $span, text $text, color $color") ;

        $style .= "$color}" ;
        $cells{$pos} = {
            text  => $text,
            style => $style,
            color => $color,
            span  => $span,
            desc  => $desc
        } ;
    }

    if ( $max > 32 ) {
        die "Too many flags" ;
    } elsif ( $max >= 16 ) {
        $flags = 32 ;
    } elsif ( $max >= 8 ) {
        $flags = 16 ;
    } else {
        $flags = 8 ;
    }

    if (%cells) {
        my $title = $opt{title} || "" ;
        $output =
            "~~~~{.table class='box' legends=1 separator='|' align='$opt{align}' title='Layout: $title' $caption}\n"
            ;

        # for 32 bit we will split table in two
        if ( $flags > 16 ) {
            for ( my $i = $flags - 1; $i >= 16; $i-- ) {
                $output .= "$i | " ;
            }
        } else {
            for ( my $i = $flags - 1; $i >= 0; $i-- ) {
                $output .= "$i | " ;
            }
        }
        $output =~ s/\|\s*$// ;
        $output .= "\n" ;

        for ( my $i = $flags - 1; $i >= 0; $i-- ) {
            if ( $cells{$i} ) {
                $output .= _svg_rotate(
                    text   => "$cells{$i}->{text}&nbsp;",
                    width  => $width,
                    rotate => $opt{direction},
                    color  => $cells{$i}->{color}
                ) . $cells{$i}->{style} ;
                $i -= $cells{$i}->{span} - 1 if ( $cells{$i}->{span} ) ;
            }
            $output .= " | " ;

            if ( $i == 16 ) {
                $output =~ s/\|\s*$// ;
                $output .= "\n &nbsp;{c16}\n" ;
                for ( my $i = 15; $i >= 0; $i-- ) {
                    $output .= "**$i** {#.ccc} | " ;
                }
                $output =~ s/\|\s*$// ;
                $output .= "\n" ;
            }
        }
        $output =~ s/\|\s*$// ;
        $output .= "\n~~~~\n\n" ;
    }
    # do we need to describe the bits?
    if ( $describe && $opt{describe} !~ /no/i ) {
        $output
            .= "\n\n~~~~{.table class=box legends=1 separator='|' align='$opt{align}' title='Description: $opt{title}'}\nFlag | Description\n"
            ;
        for ( my $i = $flags - 1; $i >= 0; $i-- ) {
            if ( $cells{$i} && $cells{$i}->{text} && $cells{$i}->{desc} ) {
                $output .= "$cells{$i}->{text} | $cells{$i}->{desc} $cells{$i}->{color}\n" ;
            }
        }
        $output .= "~~~~\n\n" ;
    }
}

# be careful how output happens, in case its in-line in a .table or something
# so no \n at the end of the line!
print $output ;




